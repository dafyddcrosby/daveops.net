Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4

====== MySQL ======



:tags: databases, MySQL

===== Monitor queries =====

::

 watch -n 1 mysqladmin --user=<user> --password=<password> processlist

===== List all databases =====

.. code-block:: mysql

 show databases;

===== List all tables =====

.. code-block:: mysql

 show tables;

===== Describe table contents =====

.. code-block:: mysql

 -- Column names
 describe <table>;
 -- Schema
 show create table <table>;
 -- Indexes
 show index from <table>;

===== Server-side help =====

.. code-block:: mysql

 -- contents
 help contents

===== Check if a server is up =====

::

 mysqladmin ping


===== Create a database =====

.. code-block:: mysql
   
 create database <databasename>;

===== Import database =====

::

 mysql -u username -p<password> database < filename.sql

===== Export database =====

::

 mysqldump -u username -p<password> database > filename.sql 

===== Delete database =====

.. code-block:: mysql

 drop database <databasename>;

===== User management =====

.. code-block:: mysql

 -- Create a user
 CREATE USER 'example_user'@'localhost' IDENTIFIED BY 'example_pass';
 -- Revoke permissions for user
 REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'example_user'@'localhost';
 -- Delete a user
 DROP USER 'example_user'@'localhost';

===== Show grants =====

.. code-block:: mysql

   -- show grants for current user
   show grants;
   -- show grants for particular user
   show grants for 'user'@'example.com';

===== Variables =====

.. code-block:: mysql

  -- session variables
  SHOW SESSION VARIABLES;
  SET SESSION sort_buffer_size=1000000;
  -- global variables
  SHOW GLOBAL VARIABLES;
  SET GLOBAL sort_buffer_size=1000000;

===== Resetting root password =====

::

 /etc/init.d/mysql stop
 /usr/bin/mysqld_safe --skip-grant-tables &
 mysql --user=root mysql

.. code-block:: mysql
   
 update user set Password=PASSWORD('new-password-here') WHERE User='root';
 flush privileges;
 exit

::

 fg
 # (ctrl-c to kill mysql)
 service mysql start

===== Create prefix index =====

.. code-block:: mysql

 alter table TABLENAME.COLUMN
 add key (COLUMN(n));

===== See what engine the table uses =====

.. code-block:: mysql

 show table status
 like 'table_name' \G

===== See running processes =====

.. code-block:: mysql

 -- Quick glance
 show processlist ;
 -- sort by user
 select * from information_schema.processlist where user='foobar';

===== Isolation Levels =====


| Isolation level  | dirty reads possible | nonrepeatable reads possible | phantom reads possible | locking reads |
|------------------|----------------------|------------------------------|------------------------|---------------|
| READ UNCOMMITTED | t                    | t                            | t                      | f             |
| READ COMMITTED   | f                    | t                            | t                      | f             |
| REPEATABLE READ  | f                    | f                            | t                      | f             |
| SERIALIZABLE     | f                    | f                            | f                      | t             |

.. code-block:: mysql

 SET SESSION TRANSACTION ISOLATION LEVEL [level];

===== Autocommit =====

.. code-block:: mysql

 SHOW VARIABLES LIKE 'AUTOCOMMIT';
 SET AUTOCOMMIT=[0|1]

===== Repairing =====

.. code-block:: mysql

 check table [tablename]
 repair table [tablename]

===== InnoDB engine =====

has high overhead, but row-level locking with multiversion concurrency control (MVCC)

===== Memory engine =====

uses table-locking, but is speedy

===== Archive engine =====

* Only uses INSERT and SELECT
* Compresses each new row with zlib
* Low disk I/O
* Ideal for logging

===== NDB Cluster Engine =====

* Consists of data nodes, management nodes, and SQL nodes
* Real-time performance with redunancy and load-balancing capabilities
* Complex joins are slow, but single table lookups can be fast

===== Falcon Engine =====

* Uses MVCC, tries to keep transactions in memory
* (need to see where it's development is at now)

===== soliddb engine =====

* similar to InnoDB

===== PBXT (Primebase XT) engine =====

* Has high write concurrency

===== Maria =====

* (needs to be looked into)

===== Good ways to benchmark =====

* Use a query log to come up with a realistic workload that covers peek time and when batch jobs are run
* Use fresh snapshots between benchmarks
* Full stack tools:

  * ab
  * http_load

	* ``http_load -rate [requests_per_sec] -parallel [num_processes] -seconds [time] [url_file]``

  * JMeter

* Single component tools:

  * mysqlslap
  * Database Test Suite (made by OSDL)
  * sql-bench
  * Super Smack

===== Optimizing =====

* Avoid NULL when possible
* ``optimize table``

===== indexing =====


* Isolate the query column
* Try to simplify any math, and use literals when possible
* When indexing char colums, try using just a few letters
  * good target is ``count(distinct name) / count(*)``

===== Check the slow query log =====

::

 log-slow-queries = file_name

===== Run profiling =====

::

 set profiling = 1;
 * run query *
 show profile;

===== Timezones =====

.. code-block:: mysql

 -- see what time zones are in use
 SELECT @@global.time_zone, @@session.time_zone;
 -- set global time zone
 SET GLOBAL time_zone = <timezone>;
 -- set session time zone
 SET time_zone = <timezone>;

===== Get version =====

::

 mysqladmin version

===== Rotate logs =====

::

 mysqladmin flush-logs

===== Search for foreign key use =====

::

 select * from KEY_COLUMN_USAGE where REFERENCED_TABLE_NAME = 'tbl_name';

===== Good books =====

* High Performance MySQL by Baron Schwartz, Perter Zaitsev, Vadim Tkachenko
